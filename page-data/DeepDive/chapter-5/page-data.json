{"componentChunkName":"component---src-templates-blog-post-js","path":"/DeepDive/chapter-5/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Start","author":"hoho","siteUrl":"http://hoho.efusioni.com:8000","comment":{"disqusShortName":"","utterances":"hohoski/gatsby-bee-blog"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"628d6544-a183-5a21-8f98-f37e966ccb15","excerpt":"값 값value은 식(표현식expression)이 평가evaluate되어 생성된 결과를 말한다. 리터널 리터널literal은 사람이 이해할 수 있는 문자 또는 약속된 기호를 사용해 값을 생성하는 표기법notation을 말한다. 리터럴은 사람이 이해할 수 있는 문자(숫자, 알파벳, 한글) 또는 미리 약속된 기호(”,\"\",.,[],{},//)로 표기한 코드다\n자바스크립트 엔진은 코드가 실행되는 시점인 런타임runtime…","html":"<h2 id=\"값\" style=\"position:relative;\"><a href=\"#%EA%B0%92\" aria-label=\"값 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>값</h2>\n<p>값<em>value</em>은 식(표현식<em>expression</em>)이 평가<em>evaluate</em>되어 생성된 결과를 말한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 10 + 20은 평가되어 숫자 값 30을 생성한다.</span>\n<span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 30</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 변수에는 10 + 20이 평가되어 생성된 숫자 값 30이 할당된다.</span>\n<span class=\"token keyword\">var</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"리터널\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%ED%84%B0%EB%84%90\" aria-label=\"리터널 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리터널</h2>\n<p>리터널<em>literal</em>은 사람이 이해할 수 있는 문자 또는 약속된 기호를 사용해 값을 생성하는 표기법<em>notation</em>을 말한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 숫자 리터럴 3</span>\n<span class=\"token number\">3</span></code></pre></div>\n<p>리터럴은 사람이 이해할 수 있는 문자(숫자, 알파벳, 한글) 또는 미리 약속된 기호(”,\"\",.,[],{},//)로 표기한 코드다\n자바스크립트 엔진은 코드가 실행되는 시점인 런타임<em>runtime</em>에 리러럴을 평가해 값을 생성한다. 즉 <code class=\"language-text\">리터널은 값을 생성하기 위해 미리 약속한 표기법</code>이라고 할 수 있다.</p>\n<h2 id=\"표현식\" style=\"position:relative;\"><a href=\"#%ED%91%9C%ED%98%84%EC%8B%9D\" aria-label=\"표현식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>표현식</h2>\n<p>표현식<em>expression</em>은 값으로 평가될 수 있는 문<em>statement</em>이다. 즉 <code class=\"language-text\">표현식이 평가되면 새로운 갓ㅂ을 생성하거나 기존 값을 참조한다.</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 리터널 100은 자바스트립트 엔진에 의해 평가되어 값을 생성하므로 리터럴은 그자체로 표현식이다.</span>\n<span class=\"token keyword\">var</span> score <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 리터럴 표현식</span>\n<span class=\"token number\">10</span>\n<span class=\"token string\">'Hello'</span>\n\n<span class=\"token comment\">// 식별자 표현식(선언이 이미 존재한다고 가정)</span>\nsum\nperson<span class=\"token punctuation\">.</span>name\narr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// 연산자 표현식</span>\n<span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token number\">20</span>\nsum <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\nsum <span class=\"token operator\">!==</span> <span class=\"token number\">10</span>\n\n<span class=\"token comment\">// 함수/메서드 호출 표현식(선언이 이미 존재한다고 가정)</span>\n<span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nperson<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"문\" style=\"position:relative;\"><a href=\"#%EB%AC%B8\" aria-label=\"문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문</h2>\n<p><code class=\"language-text\">프로그램을 구성하는 기본 단위이자 최소 실행 단위다</code><br>\n문은 여러토근으로 구성되며, <code class=\"language-text\">토큰이란 문법적인 의미를 가지며, 문법적으로 더 이상 나눌 수 없는 코드의 기본 요소를 의미한다.</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//문 (var sum = 1 + 2;) </span>\n<span class=\"token comment\">//토큰 (var, sum, *, 1, +, 2, ;)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 변수 선언문</span>\n<span class=\"token keyword\">var</span> x<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 표현식 문(할당문)</span>\nx <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 함수 선언문</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 조건문</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 반복문</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"세미콜론과-세미콜론-자동-삽입-기능\" style=\"position:relative;\"><a href=\"#%EC%84%B8%EB%AF%B8%EC%BD%9C%EB%A1%A0%EA%B3%BC-%EC%84%B8%EB%AF%B8%EC%BD%9C%EB%A1%A0-%EC%9E%90%EB%8F%99-%EC%82%BD%EC%9E%85-%EA%B8%B0%EB%8A%A5\" aria-label=\"세미콜론과 세미콜론 자동 삽입 기능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>세미콜론과 세미콜론 자동 삽입 기능</h2>\n<p>세미콜론은 문의 종료를 나타낸다. 자바스크립트 엔진은 세미콜론으로 문이 종료한 위치를 파악하고 순차적으로 하나씩 문을 실행한다.<br>\n문의 끝에 붙이는 세미콜론은 옵션이다 즉, 세미콜론은 생략 가능하다. 이는 자바스크립트 엔진이 소스코드를 해석할 때 문의 끝이라고 예측되는 지점에 자동으로\n붙여주는 <code class=\"language-text\">세미콜론 자동 삽입 기능(ASI)</code><em>automatic semicolon insertion</em>이 암묵적으로 수행된다.</p>\n<h2 id=\"표현식인-문과-표현식이-아닌-문\" style=\"position:relative;\"><a href=\"#%ED%91%9C%ED%98%84%EC%8B%9D%EC%9D%B8-%EB%AC%B8%EA%B3%BC-%ED%91%9C%ED%98%84%EC%8B%9D%EC%9D%B4-%EC%95%84%EB%8B%8C-%EB%AC%B8\" aria-label=\"표현식인 문과 표현식이 아닌 문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>표현식인 문과 표현식이 아닌 문</h2>\n<p><code class=\"language-text\">표현식인 문과 표현식이 아닌 문을 구별하는 가장 간단하고 명료한 방법은 변수에 할당해 보는 것이다.</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 변수 선언문은 값으로 평가될 수 없으므로 표현식이 아니다.</span>\n<span class=\"token keyword\">var</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 1, 2, 1 + 2, x = 1 + 2는 모두 표현식이다.</span>\n<span class=\"token comment\">// x = 1 + 2는 표현식이면서 완전한 문이기도 하다.</span>\nx <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 표현식이 아닌 문은 값처럼 사용할 수 없다.</span>\n<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token keyword\">var</span> x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// SyntaxError: Unexpected token var</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 변수 선언문은 표현식이 아닌 문이다. </span>\n<span class=\"token keyword\">var</span> x<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 할당문은 그 자체가 표현식이지만 완전한 문이기도 하다. 즉, 할당문은 표현식인 문이다.</span>\nx <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 표현식인 문은 값처럼 사용할 수 있다</span>\n<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> x <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span></code></pre></div>","frontmatter":{"title":"5장 표현식과 문","date":"December 12, 2022"}}},"pageContext":{"slug":"/DeepDive/chapter-5/","previous":{"fields":{"slug":"/assignment/december-first-week/"},"frontmatter":{"title":"12월 1주차"}},"next":{"fields":{"slug":"/react/create-react/"},"frontmatter":{"title":"create-react"}}}}}