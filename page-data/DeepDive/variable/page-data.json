{"componentChunkName":"component---src-templates-blog-post-js","path":"/DeepDive/variable/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Start","author":"hoho","siteUrl":"http://hoho.efusioni.com:8000","comment":{"disqusShortName":"","utterances":"hohoski/gatsby-bee-blog"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"32b02660-bc7e-5368-b523-198ef993855d","excerpt":"변수란 무엇인가? 왜 필요한가? 변수(Variavle)란?  \n이다. 왜 필요한가? 자바스크립트 엔진이 10(리터널)+(연산자)20(리터널) 이라는 식을 연산할때 컴퓨터의 CPU…","html":"<h2 id=\"변수란-무엇인가-왜-필요한가\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-%EC%99%9C-%ED%95%84%EC%9A%94%ED%95%9C%EA%B0%80\" aria-label=\"변수란 무엇인가 왜 필요한가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수란 무엇인가? 왜 필요한가?</h2>\n<h3 id=\"변수variavle란\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98variavle%EB%9E%80\" aria-label=\"변수variavle란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수(Variavle)란?</h3>\n<p><code class=\"language-text\">하나의 값을 저장하기 위해 확보한 메모리 공간 자체 또는 그 메모리 공간을 식별하기 위해 붙인 이름이다.</code> <br>\n<code class=\"language-text\">값의 위치를 가리키는 상징적인 이름</code>이다.</p>\n<h3 id=\"왜-필요한가\" style=\"position:relative;\"><a href=\"#%EC%99%9C-%ED%95%84%EC%9A%94%ED%95%9C%EA%B0%80\" aria-label=\"왜 필요한가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>왜 필요한가?</h3>\n<p>자바스크립트 엔진이 10(<em>리터널</em>)+(<em>연산자</em>)20(<em>리터널</em>) 이라는 식을 연산할때 컴퓨터의 CPU는 연산, 메모리는 데이터 기억한다.\n연산된 결과값도 메모리가 기억하며 각 데이터는 메모리의 주소를 가지며 결과값에 저장된 메모리 공간에 접근하시는 방식은 직접 주소 접근방법 밖에 없다.<br>\n하지만 직접접근할 경우 치명적인 오류를 발생시킬 가능성이 매우 높으므로 자바스크립트 에서는 직접적인 메모리 제어를 허용하지 않는다.<br>\n그래서 프로그래밍 언어는 기억하고 싶은 값을 메모리에 저장하고 저장된 값을 읽어 들여 재사용하기 위해 변수라는 메커니즘을 제공한다.</p>\n<h2 id=\"식별자\" style=\"position:relative;\"><a href=\"#%EC%8B%9D%EB%B3%84%EC%9E%90\" aria-label=\"식별자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>식별자</h2>\n<p>어떤값을 구별해서 식별할 수 있는 고유한 이름이며 식별자는 값이 아니라 메모리 주소를 기억하고 있다.</p>\n<h2 id=\"변수-선언\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8\" aria-label=\"변수 선언 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수 선언</h2>\n<p>변수를 사용하려면 반드시 선인이 필요하며, 변수를 선언할 때는 var, let, const 키워드를 사용한다.</p>\n<blockquote>\n<p>let, const 는 ES6 키워드로 var 키워드의 단점을 보안하기 위해서 도입되었다.</p>\n</blockquote>\n<h2 id=\"변수-선언의-실행-시점과-변수-호이스팅\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8%EC%9D%98-%EC%8B%A4%ED%96%89-%EC%8B%9C%EC%A0%90%EA%B3%BC-%EB%B3%80%EC%88%98-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85\" aria-label=\"변수 선언의 실행 시점과 변수 호이스팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수 선언의 실행 시점과 변수 호이스팅</h2>\n<p>자바스크립트 코드는 인터프리터에 의해 한줄씩 순차적으로 실행된다.<br>\n자바스크립트 엔진은 소스코드를 한줄씩 실행되기 이전에 <code class=\"language-text\">소스코드의 평가 과정</code>을 거치면서 소스코드를 실행하기 위한 준비를 한다.<br>\n이때 변수 선언을 포함한 모든 선언문(변수, 함수 등) 소스코드를 찾아 먼저 실행(선언만 포함하며 value 는 할당하지 않는다)하고<br>\n소스코드를 한 줄씩 순차적으로 실행한다.</p>\n<p><code class=\"language-text\">소스코드 평가 과정</code>을 커치면서<br>\n<code class=\"language-text\">변수 선언문이 코드의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트 고유의 특징을 변수 호이스팅</code>이라고 한다.</p>\n<h2 id=\"값의-할당\" style=\"position:relative;\"><a href=\"#%EA%B0%92%EC%9D%98-%ED%95%A0%EB%8B%B9\" aria-label=\"값의 할당 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>값의 할당</h2>\n<p>변수 선언은 소스코드가 순차적으로 실행되는 시점인 <code class=\"language-text\">런타임</code> 이전에 먼저 실행되지만 <code class=\"language-text\">값을 할당은 소스코드가 순차적으로 실행되는 시점인 런타임에 실행</code>된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// undefined ( 런타임 이전에 실행된 결과값: 변수 호이스팅)</span>\n\n <span class=\"token keyword\">var</span> score<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 변수 선언</span>\n score <span class=\"token operator\">=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 값을 할당</span>\n \n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 80 (런타임 이후에 실행된 결과값)</span></code></pre></div>\n<p>아래 경우는 최종 값이 어떻게 될까?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// undefined ( 런타임 이전에 실행된 결과값: 변수 호이스팅)</span>\n\n score <span class=\"token operator\">=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 값을 할당</span>\n <span class=\"token keyword\">var</span> score<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 변수 선언</span>\n \n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ?? (런타임 이후에 실행된 결과값)</span></code></pre></div>\n<p>변수 호이스팅을 통해 변수가 선언되고 순차적 실행으로 score 에 80을 값을 할당하고 다음 줄에 선언문이 있지만 값이 없으므로 최종 값은 80 이다.</p>\n<p>아래 경우는?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// undefined ( 런타임 이전에 실행된 결과값: 변수 호이스팅)</span>\n\n score <span class=\"token operator\">=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 값을 할당</span>\n \n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ?? (런타임 이후에 실행된 결과값)</span></code></pre></div>\n<p>결과는\n<span style=\"color:red;\">Uncaught ReferenceError: score is not defined at test.html</span>\n변수 선언문 자체가 없기 때문에 not defined 에러가 난다.</p>\n<h2 id=\"값의-재할당\" style=\"position:relative;\"><a href=\"#%EA%B0%92%EC%9D%98-%EC%9E%AC%ED%95%A0%EB%8B%B9\" aria-label=\"값의 재할당 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>값의 재할당</h2>\n<p>변수는 호이스팅을 통해 먼저 값이 undefined로 초기화 되기 때문에 엄밀히 따지면 쳔수에 처음으로 값이 할당하는 것도 재할당이다.</p>\n<p>값을 재할당할 수 없어서 변수에 저장된 값을 변경할 수 없다면 변수가 아니라 상수(<em>constant</em>)라고 한다.</p>\n<blockquote>\n<p>ES6에서 도입된 const 키워드를 사용해 선언한 변수는 재할당이 금지된다. 따라서 const 키워드를 사용하면 상수를 표현할 수 있다\n하지만 const 키워드는 반드시 상수만을 위해 사용하는 것은 아니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token keyword\">var</span> score <span class=\"token operator\">=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 80</span>\nscore <span class=\"token operator\">=</span> <span class=\"token number\">90</span> <span class=\"token comment\">// 90</span></code></pre></div>\n<p>위와 같은 소스에서 score 에 대한 값이 메모리에 저장될 때 각각 다른 메모리 주소르 가지며, 마지막의 90을 제외한 나머지 undefined와 80은 더 이상 필요ㅕ하지 않게 된다.<br>\n아무도 사용하지 않고 있는 갓ㅂ들을 가비지 콜렉터(<em>garbage collector</em>)에 의해 메모리에서 자동 해제된다. 단, 메모리에서 언제 해제될지는 예측할 수 없다.</p>\n<blockquote>\n<p>카비지콜렉터는 애플리케이션이 할당한 메모리 공간을 주기적으로 검사하여 더 이상 사용되지 않는 메모리를 해제 하는 기능을 말한다.\n자바스크립트는 가비지 콜렉터를 내장하고 있는 매니지드 언어로서 가비지 콜렉터를 통해 메모리 누수를 방지한다.</p>\n</blockquote>\n<h2 id=\"식별자-네이밍-규칙\" style=\"position:relative;\"><a href=\"#%EC%8B%9D%EB%B3%84%EC%9E%90-%EB%84%A4%EC%9D%B4%EB%B0%8D-%EA%B7%9C%EC%B9%99\" aria-label=\"식별자 네이밍 규칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>식별자 네이밍 규칙</h2>\n<ul>\n<li>특수문자를 제외한 문자, 숫자, 언더스코어(_), 달러 기호($)를 포함할 수 있다.</li>\n<li>특수문자를 제외한 문자. 언더스코어(_), 달러 기호($)로 시작해야 한다. 수자로 시작하는 것은 허용하지 않는다.</li>\n<li>예약어는 식별자로 사용할 수 없다.</li>\n</ul>\n<p>아래 선언은 가능하지만 가독성이 좋지 않다</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> person<span class=\"token punctuation\">,</span> $elem<span class=\"token punctuation\">,</span> _name<span class=\"token punctuation\">,</span> first_name<span class=\"token punctuation\">,</span> val1<span class=\"token punctuation\">;</span></code></pre></div>\n<p>ES5부터 유니코드 문자를 허용하므로 아래도 가능하지만 권장하지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> 이름<span class=\"token punctuation\">,</span> なまえ<span class=\"token punctuation\">;</span></code></pre></div>\n<p>아래는 네이밍 규칙에 위배되는 경우이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> first<span class=\"token operator\">-</span>name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// SyntaxError: Unexpected token –</span>\n<span class=\"token keyword\">var</span> <span class=\"token number\">1</span>st<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// SyntaxError: Invalid or unexpected token</span>\n<span class=\"token keyword\">var</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// SyntaxError: Unexpected token this</span></code></pre></div>\n<p>변수는 대소문자를 구별하므로 각각 별개의 변수다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> firstname<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> firstName<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> <span class=\"token constant\">FIRSTNAME</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>변수명은 의미를 명확히 표현해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// NG. x 변수가 의미하는 바를 알 수 없다.</span>\n<span class=\"token keyword\">var</span> score <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK. score 변수는 점수를 의미한다.</span></code></pre></div>\n<p>네이밍 컨벤션은 하나 이상의 영어 단어로 구성된 식별자를 만들 때 쉽게 구분하기 위한 규정한 명명 규칙이다.<br>\n아래와 같은 45가지 유형의 네이밍 컨벤션이 자주 사용된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 카멜 케이스 (camelCase)</span>\n<span class=\"token keyword\">var</span> firstName<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 스네이크 케이스 (snake_case)</span>\n<span class=\"token keyword\">var</span> first_name<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 파스칼 케이스 (PascalCase)</span>\n<span class=\"token keyword\">var</span> FirstName<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 헝가리언 케이스 (typeHungarianCase)</span>\n<span class=\"token keyword\">var</span> strFirstName<span class=\"token punctuation\">;</span> <span class=\"token comment\">// type + identifier</span>\n<span class=\"token keyword\">var</span> $elem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myId'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// DOM 노드</span>\n<span class=\"token keyword\">var</span> observable$ <span class=\"token operator\">=</span> <span class=\"token function\">fromEvent</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// RxJS 옵저버블</span></code></pre></div>","frontmatter":{"title":"4장 변수","date":"December 05, 2022"}}},"pageContext":{"slug":"/DeepDive/variable/","previous":{"fields":{"slug":"/react/npmLibraries/"},"frontmatter":{"title":"React 개발시 추천 npm 라이브러리"}},"next":{"fields":{"slug":"/react/react-hook/"},"frontmatter":{"title":"react Hook"}}}}}